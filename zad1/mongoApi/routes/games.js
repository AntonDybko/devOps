
const { ObjectId } = require('mongodb');
const express = require("express");
const router = express.Router();

const createGamesRoutes = (db) => {
    /**
     * @swagger
     * components:
     *  schemas:
     *      Game:
     *          type: object
     *          required:
     *              - title
     *              - genre
     *              - releaseYear
     *          properties:
     *              _id:
     *                  type: ObjectId
     *                  description: generated by mongodb
     *              title:
     *                  type: string
     *                  description: the book title
     *              genre:
     *                  type: string
     *                  description: the book genre
     *              releaseYear:
     *                  type: int
     *                  description: release year of the book
     *          example:
     *              _id: 7230d8a1a26162183301adbf
     *              title: Some Game
     *              genre: MOBA
     *              releaseYear: 2020
     */

    /**
     * @swagger
     * tags:
     *      name: Games
     *      description: the games managing API
     */

    /**
     * @swagger
     * /games:
     *      get:
     *          summary: returns the list of all games
     *          tags: [Games]
     *          responses:
     *              200:
     *                  description: the list of the games
     *                  content:
     *                      application/json:
     *                          schema:
     *                              type: array
     *                              items:
     *                                  $ref: '#/components/schemas/Game'
     *              500:
     *                  description: internal server error
     */
    router.get("/", function (req, res) {
        db.collection("games")
        .find()
        .toArray()
        .then((games) => {
            res.status(200).json(games);
        })
        .catch((err) => {
            console.error("Error fetching games:", err);
            res.status(500).json({ error: "Internal server error" });
        });
    });
    
    /**
     * @swagger
     * /games:
     *      post:
     *          summary: create a new game
     *          tags: [Games]
     *          requestBody:
     *              required: true
     *              content:
     *                  application/json:
     *                      schema:
     *                          $ref: '#/components/schemas/Game'
     *          responses:
     *              200:
     *                  description: the game was successfully created
     *                  content:
     *                      application/json:
     *                          schema: 
     *                              $ref: '#/components/schemas/Game'
     *              500:
     *                  description: internal server error
     *                              
     */
    router.post("/", function (req, res) {
        console.log(req.body)
        const newGame = req.body;
        db.collection("games")
        .insertOne(newGame)
        .then((result) => {
            res.status(201).json(result);
        })
        .catch((err) => {
            console.error("Error inserting game:", err);
            res.status(500).json({ error: "Internal server error" });
        });
    });

    /**
     * @swagger
     * /games/{gameId}:
     *      put:
     *          summary: edit an existing game
     *          tags: [Games]
     *          parameters:
     *              - in: path
     *                name: gameId
     *                schema:
     *                  type: string
     *                required: true
     *                description: the game id
     *          requestBody:
     *              required: true
     *              content:
     *                  application/json:
     *                      schema:
     *                          $ref: '#/components/schemas/Game'
     *          responses:
     *              200:
     *                  description: successfully edited game
     *                  content:
     *                      application/json:
     *                          schema:
     *                              $ref: '#/components/schemas/Game'
     *              404:
     *                  description: game not found
     *              500:
     *                  description: internal server error
     *                  
     */
    router.put("/:gameId", function (req, res) {
        //console.log(req.query)
        const gameId = req.params.gameId;
        const updatedGame = req.body;

        db.collection("games")
        .updateOne({ _id: new ObjectId(gameId) }, { $set: updatedGame })
        .then((result) => {
            if (result.modifiedCount === 1) {
                res.status(200).json(updatedGame);
            } else {
                res.status(404).json({ error: "Game not found" });
            }
        })
        .catch((err) => {
            console.error("Error updating game:", err);
            res.status(500).json({ error: "Internal server error" });
        });
    });

    /**
     * @swagger
     * /games/{gameId}:
     *      delete:
     *          summary: delete an existing game
     *          tags: [Games]
     *          parameters:
     *            - in: path
     *              name: gameId
     *              schema:
     *                  type: string
     *              required: true
     *              description: the game id
     *          responses:
     *              204:
     *                  description: game successfully deleted
     *              404:
     *                  description: game not found
     *              500:
     *                  description: internal server error
     * 
     */
    router.delete("/:gameId", function (req, res) {
        const gameId = req.params.gameId;

        db.collection("games")
        .deleteOne({ _id: new ObjectId(gameId) })
        .then((result) => {
            if (result.deletedCount === 1) {
                res.status(204).send();
            } else {
                res.status(404).json({ error: "Game not found" });
            }
        })
        .catch((err) => {
            console.error("Error deleting game:", err);
            res.status(500).json({ error: "Internal server error" });
        });
    });

    return router;
}

module.exports = createGamesRoutes;