pipeline {
    agent any

        environment{
            JENKINS_CONTAINER_DB_PORT = "5432"
            JENKINS_CONTAINER_DB_NAME = "postgres"
            JENKINS_CONTAINER_APP_PORT = "8000"
        }

        options {
            timeout(5)
            gitLabConnection('GitLab')
        }
        triggers {
            gitlab(
                triggerOnPush: true,
                triggerOnMergeRequest: true,
                branchFilterType: 'All',
                addVoteOnMergeRequest: true)
        }

    stages {
        /*stage('Test api') {
            agent {
                docker { image 'node:latest' }
            }
            steps {
                dir('project/pgApi') {
                    script {
                        sh 'npm install'
                        sh 'npm run test'
                    }
                }
            }
        }*/

        stage('Test api'){
            steps{
                script{
                    docker.build('postgres-container', './project/testDb')
                    docker.build('api-container', './project')

                    docker.image('postgres-container').withRun("-p ${JENKINS_CONTAINER_DB_PORT}:${JENKINS_CONTAINER_DB_PORT}") { postgresContainer ->

                            docker.image('api-container').inside("-p ${JENKINS_CONTAINER_APP_PORT}:${JENKINS_CONTAINER_APP_PORT} --link ${postgresContainer.id}:${JENKINS_CONTAINER_DB_NAME}") { AppContainer ->
                                dir('project/pgApi') {
                                    sh 'sleep 10'
                                    sh 'npm install'
                                    sh "npm run test"
                                }
                            }
                     }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('project') {
                    script {
                        docker.build('r4t00r/apb_project_api:9.0.0')
                    }
                }
            }
        }

        stage('Push Docker Image') {
            when {
                branch 'main'
            }
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub_credentionals', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh 'docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD'
                    }
                }

                script {
                    sh 'docker push r4t00r/apb_project_api:9.0.0'
                }
            }
        }
    }
}